/*
 * Copyright (C) 2002 - 2025 The Rseslib Contributors
 * 
 *  This file is part of Rseslib.
 *
 *  Rseslib is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Rseslib is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


package weka.classifiers.rules;

import java.util.Arrays;
import java.util.Enumeration;
import java.util.Vector;

import rseslib.processing.rules.AQ15OneRuleGenerator;
import rseslib.processing.rules.CoveringRuleGenerator;
import weka.classifiers.AbstractRseslibClassifierWrapper;
import weka.core.Option;
import weka.core.Utils;

/**
 * Weka wrapper for AQ15 classifier.
 * @see rseslib.processing.classification.rules.AQ15
 *
 * @author      Arkadiusz Wojna
 */
public class AQ15 extends AbstractRseslibClassifierWrapper
{
	/** for serialization */
	static final long serialVersionUID = 1L;
	
	public AQ15() throws Exception
	{
		super(rseslib.processing.classification.rules.AQ15.class);
	}
	
	/**
	 * Returns a string describing classifier
	 * @return a description suitable for
	 * displaying in the explorer/experimenter gui
	 */
	public String globalInfo() {

		return  "Rule based classifier using a set of rules generated by the covering algorithm AQ15. "
				+ "For more information see\n\n"
				+ getTechnicalInformation().toString();
	}
	
	// methods required for option 'coverage'
	public void setCoverage(double value)
	{
		getProperties().setProperty(CoveringRuleGenerator.COVERAGE_NAME, String.valueOf(value));
	}
	
	public double getCoverage()
	{
		return Double.parseDouble(getProperties().getProperty(CoveringRuleGenerator.COVERAGE_NAME));
	}
	
	public String coverageTipText()
	{
		return "Minimal part of a training set to be covered by the rules";
	}

	// methods required for option 'searchWidth'
	public void setSearchWidth(int value)
	{
		getProperties().setProperty(CoveringRuleGenerator.SEARCH_WIDTH_NAME, String.valueOf(value));
	}
	
	public int getSearchWidth()
	{
		return Integer.parseInt(getProperties().getProperty(CoveringRuleGenerator.SEARCH_WIDTH_NAME));
	}
	
	public String searchWidthTipText()
	{
		return "Width of search space while searching for each next best rule";	
	}

	// methods required for option 'margin'
	public void setMargin(double value)
	{
		getProperties().setProperty(AQ15OneRuleGenerator.MARGIN_NAME, String.valueOf(value));
	}
	
	public double getMargin()
	{
		return Double.parseDouble(getProperties().getProperty(AQ15OneRuleGenerator.MARGIN_NAME));
	}
	
	public String marginTipText()
	{
		return "Safety level for interval descriptors for numerical attributes";
	}

	// methods required for option 'ruleVoting'
	public void setRuleVoting(boolean value)
	{
		getProperties().setProperty(rseslib.processing.classification.rules.AQ15.RULE_VOTING_NAME, String.valueOf(value));
	}
	
	public boolean getRuleVoting()
	{
		return Boolean.parseBoolean(getProperties().getProperty(rseslib.processing.classification.rules.AQ15.RULE_VOTING_NAME));
	}
	
	public String ruleVotingTipText()
	{
		return "Whether the classifier selects a decision by rule voting or by one strongest rule";
	}

	/**
	 * Returns an enumeration describing the available options.
	 *
	 * @return an enumeration of all the available options.
	 */
	public Enumeration listOptions() {

		Vector<Option> result = new Vector<Option>();

		Enumeration enm = super.listOptions();
		while (enm.hasMoreElements())
			result.addElement((Option)enm.nextElement());

		result.addElement(new Option(
				"\tMinimal part of a training set to be covered by the rules.\n"
						+ "\t(default: 1.0)",
						"C", 1, "-C <minimal coverage>"));

		result.addElement(new Option(
				"\tWidth of search space while searching for each next best rule.\n"
						+ "\t(default: 1)",
						"W", 1, "-W <search width>"));

		result.addElement(new Option(
				"\tSafety level for interval descriptors for numerical attributes.\n"
						+ "\t(default: 0.5)",
						"M", 1, "-M <safety margin>"));

		result.addElement(new Option(
				"\tClassify with the decision of one strongest rule.\n",
						"O", 0, "-O"));

		return result.elements();
	}

	/**
	 * Parses a given list of options.
	 *
	 * @param options the list of options as an array of strings
	 * @throws Exception if an option is not supported 
	 */
	public void setOptions(String[] options) throws Exception
	{
		String	tmpStr;

		resetToDefaults();
		
		tmpStr = Utils.getOption('C', options);
		if (tmpStr.length() != 0)
			setCoverage(Double.parseDouble(tmpStr));

		tmpStr = Utils.getOption('W', options);
		if (tmpStr.length() != 0)
			setSearchWidth(Integer.parseInt(tmpStr));

		tmpStr = Utils.getOption('M', options);
		if (tmpStr.length() != 0)
			setMargin(Double.parseDouble(tmpStr));

		setRuleVoting(!Utils.getFlag('O', options));

		super.setOptions(options);
	}	  
	  
	/**
	 * Gets the current settings of the classifier.
	 *
	 * @return an array of strings suitable for passing to setOptions
	 */
	public String[] getOptions()
	{
		Vector<String> result = new Vector<String>();

		result.add("-C");
		result.add("" + getCoverage());

		result.add("-W");
		result.add("" + getSearchWidth());

		result.add("-M");
		result.add("" + getMargin());

		if(!getRuleVoting())
			result.add("-O");
		
		result.addAll(Arrays.asList(super.getOptions())); // superclass
		return result.toArray(new String[result.size()]);
	}

	/**
	* Main method for executing this classifier.
	*
	* @param args the options, use "-h" to display options
	*/
	public static void main(String[] args) throws Exception
	{
		runClassifier(new AQ15(), args);
	}
}
