# Switch indicating whether the classifier treats the majority decision as the minority decision 
useMajorityDecAsMinorityDec = FALSE
# Type of a distance measure used for particular attributes (CityAndHamming, CityAndSimpleValueDifference, DensityBasedValueDifference, InterpolatedValueDifference)
metric = CityAndSimpleValueDifference
# Vicinity size in density based metric (used only if metric = DensityBasedValueDifference)
vicinitySizeForDensityBasedMetric = 200
# Attribute weighting method (None, Perceptron, DistanceBased, AccuracyBased)
weightingMethod = None
# Switch indicating whether the classifier uses indexing to accelerate search of nearest neighbours
indexing = TRUE
# Switch indicating whether the classifier learns the optimal values of parameters
learnOptimalParameters = TRUE
# Switch indicating whether to use 3-dimensional or 4-dimensional optimisation
optimisation4D = FALSE
# The number of nearest neighbours used to vote for decision (set automatically if learnOptimalParameters = TRUE)
k = 1
# The maximal possible k while learning the optimal value (used only if learnOptimalParameters = TRUE)
maxK = 100
# if weight of minority class divided by sum of weights is greater than or equal to this threshold
# then minority class is chosen by classifier, otherwise majority class,
# set automatically if learnOptimalParameters = TRUE
# (this threshold in code is used to be called pValue)
pThreshold = 0.39
# The minimal possible value while learning the optimal pThreshold (used only if learnOptimalParameters = TRUE)
pThresholdMin = 0.0
# The maximal possible value while learning the optimal pThreshold (used only if learnOptimalParameters = TRUE)
pThresholdMax = 0.5
# The parameter defining the density of values between pThresholdMin and pThresholdMax considered
# while learning the optimal pThreshold (used only if learnOptimalParameters = TRUE)
pThresholdStep = 0.01
# Consistency level for minority class, set automatically if learnOptimalParameters = TRUE
# (this values in code is used to be called sMinorityValue)
sMinority = 1.0
# The minimal possible value while learning the optimal sMinority value (used only if learnOptimalParameters = TRUE)
sMinorityMin = 0.0
# The maximal possible value while learning the optimal sMinority value (used only if learnOptimalParameters = TRUE)
sMinorityMax = 1.0
# The parameter defining the density of values between sMinorityMin and sMinorityMax considered
# while learning the optimal sMinority value (used only if learnOptimalParameters = TRUE)
sMinorityStep = 0.1
# Consistency level for majority class, set automatically if learnOptimalParameters = TRUE
# (this values in code is used to be called sMajorityValue)
sMajority = 1.0
# The minimal possible value while learning the optimal sMajority value (used only if learnOptimalParameters = TRUE and optimisation4D = TRUE)
sMajorityMin = 0.0
# The maximal possible value while learning the optimal sMajority value (used only if learnOptimalParameters = TRUE and optimisation4D = TRUE)
sMajorityMax = 1.0
# The parameter defining the density of values between sMajorityMin and sMajorityMax considered
# while learning the optimal sMajority value (used only if learnOptimalParameters = TRUE and optimisation4D = TRUE)
sMajorityStep = 0.1
# Measures for optimization (Fmeasure, Gmean, Accuracy)
optimisationMeasure = Gmean
# Switch indicating whether nearest neighbours are filtered by rules
filterNeighboursUsingRules = TRUE
# The type of voting for the decision by nearest neighbours (Equal, InverseDistance, InverseSquareDistance)
voting = Equal
